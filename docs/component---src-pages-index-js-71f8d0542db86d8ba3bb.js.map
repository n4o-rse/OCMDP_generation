{"version":3,"file":"component---src-pages-index-js-71f8d0542db86d8ba3bb.js","mappings":"kOAwGA,UA9FkBA,IAAmB,IAAlB,SAAEC,GAAUD,EAC7B,MAAM,EAACE,EAAe,EAACC,IAAqBC,EAAAA,EAAAA,UAAS,KAC/C,EAACC,EAAS,EAACC,IAAeF,EAAAA,EAAAA,UAAS,KACnC,KAAEG,EAAI,YAAEC,IAAgBC,EAAAA,EAAAA,MACxB,OAAEC,IAAWC,EAAAA,EAAAA,KACbC,EAAeF,EAAOE,cAE5BC,EAAAA,EAAAA,WAAU,MACRC,iBACE,MAAMC,QAAYC,MAAM,cAClBC,QAAeF,EAAIG,OACzBf,EAAkBc,GAClB,MAAME,EAAYC,MAAMC,KACtB,IAAIC,KAAGC,EAAAA,EAAAA,GAAKN,EAAOO,QAASC,GAAOA,EAAGN,cAExCX,EAAY,IAAKD,EAAMY,UAAWA,EAAWO,WAAW,GAC1D,CACAC,IACC,KAGHd,EAAAA,EAAAA,WAAU,KACR,MAAMe,GAAkBC,EAAAA,EAAAA,oBAAmB5B,GAC3C,GAAI2B,IAAoBrB,EAAKuB,iBAAkB,CAC7C,MAAMC,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,mBAAoB1B,EAAKY,UACzBW,iBAAkBF,IAGpBtB,EAAYyB,GACZvB,EAAY,IACPD,EACHuB,iBAAkBC,EAClBL,WAAW,EACXQ,cAAe,CAAC,GAEpB,KAAO,CACL,MAAMH,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,mBAAoB1B,EAAKY,UACzBW,kBAAkBvB,aAAI,EAAJA,EAAMuB,mBAAoB,OAE9CxB,EAAYyB,GACZvB,EAAY,IACPD,EACHuB,iBAAkBC,EAClBL,WAAW,EACXQ,cAAe,CAAC,GAEpB,GACC,CAAC3B,aAAI,EAAJA,EAAMY,UAAWZ,aAAI,EAAJA,EAAMuB,mBAe3B,OACEK,EAAAA,EAAAA,GAACC,EAAAA,EAAM,CAAC/B,SAAUA,IAChB8B,EAAAA,EAAAA,GAACE,EAAAA,EAAG,CAACC,MAAM,kBAAkBC,SAAU,CAAC,qBACxCJ,EAAAA,EAAAA,GAAA,OAAKK,UAAU,qBACbL,EAAAA,EAAAA,GAAA,UACGjC,EAAeuC,IAAKC,IACnBP,EAAAA,EAAAA,GAAA,MAAIQ,IAAKD,EAAcE,KACrBT,EAAAA,EAAAA,GAACU,EAAAA,KAAI,CACHC,QAASA,IACPtC,EAAY,IACPD,EACHwC,wBAAsBxB,EAAAA,EAAAA,GAAMmB,EAAcvB,WAC1Ce,cAAeQ,EACfZ,iBAAkBY,EAAcvB,UAAU6B,SAAS3C,GAC/CA,EACAqC,EAAcvB,UAAU,KAGhC8B,IAAIC,EAAAA,EAAAA,aAAYR,EAAcE,GAAK,OAAOhC,IA/BtC8B,KAChB,MAAMJ,GACJa,EAAAA,EAAAA,MAAK9C,EAAL8C,EACET,aAAa,EAAbA,EAAeJ,SACbI,aAAa,EAAbA,EAAeU,aACfV,aAAa,EAAbA,EAAeW,YACdX,EAAcE,GACrB,OAAIN,GAGGI,EAAcE,IAuBRU,CAASZ,S","sources":["webpack://skohub-vocabs/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { i18n, getFilePath, getLanguageFromUrl } from \"../common\"\r\nimport { useSkoHubContext } from \"../context/Context\"\r\nimport { getUserLang } from \"../hooks/getUserLanguage\"\r\nimport { getConfigAndConceptSchemes } from \"../hooks/configAndConceptSchemes.js\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst IndexPage = ({ location }) => {\r\n  const [conceptSchemes, setConceptSchemes] = useState([])\r\n  const [language, setLanguage] = useState(\"\")\r\n  const { data, updateState } = useSkoHubContext()\r\n  const { config } = getConfigAndConceptSchemes()\r\n  const customDomain = config.customDomain\r\n\r\n  useEffect(() => {\r\n    async function fetchConceptData() {\r\n      const res = await fetch(\"index.json\")\r\n      const csData = await res.json()\r\n      setConceptSchemes(csData)\r\n      const languages = Array.from(\r\n        new Set([...csData.flatMap((cs) => cs.languages)])\r\n      )\r\n      updateState({ ...data, languages: languages, indexPage: true })\r\n    }\r\n    fetchConceptData()\r\n  }, [])\r\n\r\n  // set language stuff\r\n  useEffect(() => {\r\n    const languageFromUrl = getLanguageFromUrl(location)\r\n    if (languageFromUrl && !data.selectedLanguage) {\r\n      const userLang = getUserLang({\r\n        availableLanguages: data.languages,\r\n        selectedLanguage: languageFromUrl,\r\n      })\r\n\r\n      setLanguage(userLang)\r\n      updateState({\r\n        ...data,\r\n        selectedLanguage: userLang,\r\n        indexPage: true,\r\n        currentScheme: {},\r\n      })\r\n    } else {\r\n      const userLang = getUserLang({\r\n        availableLanguages: data.languages,\r\n        selectedLanguage: data?.selectedLanguage || null,\r\n      })\r\n      setLanguage(userLang)\r\n      updateState({\r\n        ...data,\r\n        selectedLanguage: userLang,\r\n        indexPage: true,\r\n        currentScheme: {},\r\n      })\r\n    }\r\n  }, [data?.languages, data?.selectedLanguage])\r\n\r\n  const getTitle = (conceptScheme) => {\r\n    const title =\r\n      i18n(language)(\r\n        conceptScheme?.title ||\r\n          conceptScheme?.prefLabel ||\r\n          conceptScheme?.dc_title\r\n      ) || conceptScheme.id\r\n    if (title) {\r\n      return title\r\n    }\r\n    return conceptScheme.id\r\n  }\r\n\r\n  return (\r\n    <Layout language={language}>\r\n      <SEO title=\"Concept Schemes\" keywords={[\"conceptSchemes\"]} />\r\n      <div className=\"centerPage block\">\r\n        <ul>\r\n          {conceptSchemes.map((conceptScheme) => (\r\n            <li key={conceptScheme.id}>\r\n              <Link\r\n                onClick={() =>\r\n                  updateState({\r\n                    ...data,\r\n                    conceptSchemeLanguages: [...conceptScheme.languages],\r\n                    currentScheme: conceptScheme,\r\n                    selectedLanguage: conceptScheme.languages.includes(language)\r\n                      ? language\r\n                      : conceptScheme.languages[0],\r\n                  })\r\n                }\r\n                to={getFilePath(conceptScheme.id, `html`, customDomain)}\r\n              >\r\n                {getTitle(conceptScheme)}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n"],"names":["_ref","location","conceptSchemes","setConceptSchemes","useState","language","setLanguage","data","updateState","useSkoHubContext","config","getConfigAndConceptSchemes","customDomain","useEffect","async","res","fetch","csData","json","languages","Array","from","Set","_toConsumableArray","flatMap","cs","indexPage","fetchConceptData","languageFromUrl","getLanguageFromUrl","selectedLanguage","userLang","getUserLang","availableLanguages","currentScheme","___EmotionJSX","Layout","SEO","title","keywords","className","map","conceptScheme","key","id","Link","onClick","conceptSchemeLanguages","includes","to","getFilePath","i18n","prefLabel","dc_title","getTitle"],"sourceRoot":""}